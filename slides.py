
from __future__ import print_function

import os.path

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

import json
import chat
import audio

SCOPES = ['https://www.googleapis.com/auth/presentations']

class slides:

    def __init__(self):

        pass

    def main(self):

        FILENAME = "test.wav"

        


        chat_obj = chat.chat()
       
        creds = None
        if os.path.exists('token.json'):
            creds = Credentials.from_authorized_user_file('token.json', SCOPES)
       
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(
                    'credentials.json', SCOPES)
                creds = flow.run_local_server(port=0)
        
            with open('token.json', 'w') as token:
                token.write(creds.to_json())


        try:
            service = build('slides', 'v1', credentials=creds)

            chat_obj.request_text(FILENAME)

            with open('output.json') as json_file:
                presentation_data = json.load(json_file)

            body = {
                'title': str(presentation_data.get("title"))
            }
            presentation = service.presentations() \
                .create(body=body).execute()
            print(f"Created presentation with ID:"
                  f"{(presentation.get('presentationId'))}")

            presentation_id = f"{(presentation.get('presentationId'))}"

            

            self.create_slide(service, presentation_id, presentation, presentation_data)

        except HttpError as error:
            print(f"An error occurred: {error}")
            print("presentation not created")
            return error

        return "DONE"

    def create_slide(self, service, presentationId, presentation, jsonFile):

        slides = jsonFile.get("slides")
        title = jsonFile.get("title")

        file = presentation

        print(len(file))

        titleID = file['slides'][0]['pageElements'][0]['objectId']
        subtitleID = file['slides'][0]['pageElements'][1]['objectId']


        requests = [

            {
                'insertText': {

                    'objectId': titleID, 'text': title

                }

            },
            {
                'insertText': {

                    'objectId': subtitleID, 'text': "generated by MrSlides"

                }

            }

        ]

        body = {
                'requests': requests
            }

        response = service.presentations().batchUpdate(presentationId=presentationId, body=body).execute()
        print("slide created")

        # 0 

        page_idx = 1

        for slide in slides:

            title = slide.get("title")
            contents = slide.get("content")
            add = ""

            for content in contents:
                add += content + "\n"

            add = add.rstrip('\n')

            requests = [
            {
                'createSlide': {
                    'objectId': str(page_idx + 500000),
                    'slideLayoutReference': {
                        'predefinedLayout': 'TITLE_AND_BODY'
                    }
                }
            }
            ]
            body = {
                'requests': requests
            }

            service.presentations().batchUpdate(presentationId=presentationId, body=body).execute()

            file = service.presentations().get(presentationId=presentationId).execute()
            print("After creating page with: " + str(page_idx) + " len(file) is " + str(len(file['slides'])))

            titleID = file['slides'][page_idx]['pageElements'][0]['objectId']
            bodyID = file['slides'][page_idx]['pageElements'][1]['objectId']

            requests = [

            {
                'insertText': {

                    'objectId': titleID, 'text': title

                }

            },
            {
                'insertText': {

                    'objectId': bodyID, 'text': add

                }

            },
            {
                "createParagraphBullets": {
            "objectId": bodyID,
            "bulletPreset": "BULLET_ARROW_DIAMOND_DISC",
            "textRange": {
              "type": "ALL"
            }
            }
            }

            ]
            body = {
                'requests': requests
            }

            service.presentations().batchUpdate(presentationId=presentationId, body=body).execute()

            print("slide created")


            page_idx += 1

        return title






